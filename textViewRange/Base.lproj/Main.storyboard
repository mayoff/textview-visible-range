<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="6185.11" systemVersion="13E28" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="vXZ-lx-hvc">
    <dependencies>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="6190.4"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="ufC-wZ-h7g">
            <objects>
                <viewController id="vXZ-lx-hvc" customClass="ViewController" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="jyV-Pf-zRb"/>
                        <viewControllerLayoutGuide type="bottom" id="2fi-mo-0CV"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="kh9-bI-dsS">
                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
                        <autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
                        <subviews>
                            <textView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" editable="NO" translatesAutoresizingMaskIntoConstraints="NO" id="k2O-LY-cTi">
                                <rect key="frame" x="0.0" y="37" width="600" height="278"/>
                                <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                                <mutableString key="text">My goal is to mark all visible misspelled words in an UITextView.

The inefficient algorithm is to use the spell checker to find all ranges of misspelled words in the text, convert them to UITextRange objects using positionFromPosition:inDirection:offset etc, then get the graphics rects using the UITextInput method firstRectFromRange.

Thus all the text -&gt; misspelled words-&gt; NSRange collection -&gt; UITextRange collection -&gt; CGRect collection -&gt; evaluate for visibility, draw visible ones

The problem is that this requires that all the text is checked, and all misspelled words are converted to graphics rects.

Thus, I imagine the way to go is to somehow find out what parts of the underlying .text in the UITextView that is visible at the moment.

Thus for range of text visible -&gt; misspelled words-&gt; NSRange collection -&gt; UITextRange collection -&gt; CGRect collection -&gt; evaluate for visibility, draw visible ones

The code in ios - how to find what is the visible range of text in UITextView? might work as a way to bound what parts of the text to check, but still requires that all text is measured, which I imagine could be quite costly.

Any suggestions?

</mutableString>
                                <fontDescription key="fontDescription" type="system" pointSize="14"/>
                                <textInputTraits key="textInputTraits" autocapitalizationType="sentences"/>
                                <connections>
                                    <outlet property="delegate" destination="vXZ-lx-hvc" id="IfW-vu-3r8"/>
                                </connections>
                            </textView>
                            <textView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" editable="NO" translatesAutoresizingMaskIntoConstraints="NO" id="u0Z-79-BTA">
                                <rect key="frame" x="0.0" y="323" width="600" height="277"/>
                                <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                                <string key="text">Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.</string>
                                <fontDescription key="fontDescription" type="system" pointSize="9"/>
                                <textInputTraits key="textInputTraits" autocapitalizationType="sentences"/>
                            </textView>
                        </subviews>
                        <color key="backgroundColor" white="0.66666666666666663" alpha="1" colorSpace="calibratedWhite"/>
                        <constraints>
                            <constraint firstAttribute="trailing" secondItem="u0Z-79-BTA" secondAttribute="trailing" id="4Sm-ba-R28"/>
                            <constraint firstItem="k2O-LY-cTi" firstAttribute="top" secondItem="jyV-Pf-zRb" secondAttribute="bottom" constant="17" id="6sX-fe-3FR"/>
                            <constraint firstAttribute="trailing" secondItem="k2O-LY-cTi" secondAttribute="trailing" id="7Y3-va-EWc"/>
                            <constraint firstItem="2fi-mo-0CV" firstAttribute="top" secondItem="u0Z-79-BTA" secondAttribute="bottom" id="Hf4-mP-0qB"/>
                            <constraint firstItem="k2O-LY-cTi" firstAttribute="leading" secondItem="kh9-bI-dsS" secondAttribute="leading" id="Jjv-Ot-Bzl"/>
                            <constraint firstItem="u0Z-79-BTA" firstAttribute="height" secondItem="k2O-LY-cTi" secondAttribute="height" id="L6s-7r-SLc"/>
                            <constraint firstItem="u0Z-79-BTA" firstAttribute="leading" secondItem="kh9-bI-dsS" secondAttribute="leading" id="SXD-HU-q1g"/>
                            <constraint firstItem="u0Z-79-BTA" firstAttribute="top" secondItem="k2O-LY-cTi" secondAttribute="bottom" constant="8" id="yWL-ie-ahv"/>
                        </constraints>
                    </view>
                    <connections>
                        <outlet property="sourceTextView" destination="k2O-LY-cTi" id="CZ7-iy-c11"/>
                        <outlet property="targetTextView" destination="u0Z-79-BTA" id="8oJ-ZV-MH9"/>
                    </connections>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="x5A-6p-PRh" sceneMemberID="firstResponder"/>
            </objects>
        </scene>
    </scenes>
</document>
